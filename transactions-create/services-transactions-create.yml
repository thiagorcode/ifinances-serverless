AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Stack of create transaction

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Parameters:
  TableTransactionsCardName:
    Type: String
  TableTransactionsCategoryName:
    Type: String
Globals:
  Function:
    Timeout: 15
    Tracing: Active
    Runtime: nodejs18.x
    Architectures:
      - x86_64
    Layers:
      - !Ref RuntimeDependenciesLayer
  Api:
    TracingEnabled: true

Resources:
  RuntimeDependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Metadata:
      BuildMethod: makefile 
    Properties:
      Description: Runtime dependencies for Lambdas
      ContentUri: ./
      CompatibleRuntimes:
        - nodejs18.x
      RetentionPolicy: Retain
  
  # CreateTransactionFunction:
  #   Type: AWS::Serverless::Function 
  #   Metadata:
  #     BuildMethod: makefile
  #   Properties:
  #     Handler: dist/handlers/create.handler
  #     FunctionName:
  #       Fn::Join:
  #         - '-'
  #         - - Ref: AWS::StackName
  #     Environment:
  #       Variables:
  #         TABLE_NAME: !Ref IFinancesTransactionsTable
  #     Policies:
  #       - DynamoDBWritePolicy:
  #           TableName: !Ref IFinancesTransactionsTable

  
  
  # ProcessCreateTransactionFunction:
  #   Type: AWS::Serverless::Function 
  #   Metadata:
  #     BuildMethod: makefile
  #   Properties:
  #     Handler: dist/handlers/processCreateTransaction.handler
  #     FunctionName:
  #       Fn::Join:
  #         - '-'
  #         - - Ref: AWS::StackName
  #           - process-create
  #     Environment:
  #       Variables:
  #         TABLE_NAME: !Ref IFinancesTransactionsTable
  #     Policies:
  #       - DynamoDBWritePolicy:
  #           TableName: !Ref IFinancesTransactionsTable
  #     Events:
  #       Trigger:
  #         Type: EventBridgeRule 
  #         Properties:
  #           EventBusName: !Ref BusTransactionsName
  #           Pattern:
  #             source:
  #               - lambda.transaction-event
  #             detail-type:
  #               - TRANSACTION_CREATE

  EnrichmentStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudwatch:*'
                  - 'logs:*'
                Resource: '*'
        - PolicyName: AccessDynamoDb
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:*'
                Resource: 
                  - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableTransactionsCardName}
                  - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableTransactionsCategoryName}


  EnrichmentStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: EXPRESS
      DefinitionUri: workflow/enrichmentCreateTransaction.asl.json
      Role: !GetAtt EnrichmentStateMachineRole.Arn
      DefinitionSubstitutions:
        CategoryDDBTable: !Ref TableTransactionsCategoryName
        CardDDBTable: !Ref TableTransactionsCardName
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt EnrichmentLogGroup.Arn
        IncludeExecutionData: true
        Level: 'ALL'

  
  # Logs
  EnrichmentLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['/', ['stepfunctions', StateMachine]]
      RetentionInDays: 14
  CreateTransactionLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${CreateTransactionFunction}
      RetentionInDays: 14
  ProcessCreateTransactionLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ProcessCreateTransactionFunction}
      RetentionInDays: 14